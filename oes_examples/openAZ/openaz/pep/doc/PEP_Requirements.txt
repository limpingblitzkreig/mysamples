* PEP Layer is fundamentally a wrapper of the AzAPI with the goal of simplifying the creation of PEP

What does the PEP Layer add to the AzAPI

	* Simplified API
		* Wraps API plumbing with common Java Objects
			* Request and Response
		* Makes some simplifying assumptions - Subjects, Resources and Actions have names
	* Java Object as First Class Objects
		* Standard Mapping between these Objects and AzAPI
			* JAAS Subject
			* Permission
			* HttpServletRequest/HttpServletResponse
	* PEP Lifecyle 
		* Init/Shutdown
		* Request lifecycle for common containers
			* Re-Use of Objects - JAAS Subject, Permission 
			* Container Session Interaction
		* PEP/PDP Management (Implication for AzAPI/Provider)
			* Ex:  Notify on Policy Change
			* Ex:  Flush this cache

	* Spring Based Configuration and Deployment
	* Framework for extension 
		* Inside PEP - Use Case which should be possible, but are not being delivered
			* Ex: Custom Mapping of Java Objects to AzApi Objects (CustomMapper)
			* Ex: Connection Pool of AzAPI handles, to support load/balancing, failover (AzAPIFactory)
			* Ex: Caching of PDP results (PreHandler)
			* Ex: Audit/Monitoring (PostHandler)
	*Sample PEP(s)
		* Standalone Java - P1
		* Java Policy Provider - P1 
		* Java Servlet Filter Running in Apache Tomcat - P1
			* JSP Tag Library - P2
		* EJB Method Interceptor (container?) -P2
		* JAX-WS Handler Running Apache Tomcat - P2
		* JSF RenderKit - P2
		* ACEGI - P3
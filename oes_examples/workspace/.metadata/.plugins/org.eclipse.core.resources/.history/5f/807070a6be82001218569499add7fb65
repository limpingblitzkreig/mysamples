package JavaBatchProcess.org.cap.util;import netscape.ldap.LDAPConnection;import netscape.ldap.LDAPAttribute;import netscape.ldap.LDAPEntry;import netscape.ldap.LDAPException;import netscape.ldap.LDAPModification;import netscape.ldap.LDAPSearchResults;import netscape.ldap.LDAPv3;import java.util.Enumeration;import java.util.ArrayList;import java.util.Arrays;import java.util.Vector;
public class LDAPFunctions 
{ 
    private String LDAP_GROUP_MEMBERSHIP=null;    private String LDAP_USER_STATUS=null;    private String LDAP_MEMBER_ID=null;    private String LDAP_PERSON_ID=null;    private String MY_SEARCHBASE=null;    private String MY_USER_DN =null;    private String MY_GROUP_DN=null;    public  LDAPConnection con = new LDAPConnection();    public CAPProperties appProp = new CAPProperties();
    private String userDN=null;    private boolean isSystemUser=false;        public LDAPFunctions() {        //Get the connection        try {            reconnect();            //Set all the parameters:            LDAP_GROUP_MEMBERSHIP=appProp.getProperty("ldap.groupmembership");            LDAP_USER_STATUS=appProp.getProperty("ldap.userstatus");            LDAP_MEMBER_ID=appProp.getProperty("ldap.memberid");            LDAP_PERSON_ID=appProp.getProperty("ldap.personid");            MY_SEARCHBASE=appProp.getProperty("ldap.searchbase");            MY_USER_DN =appProp.getProperty("ldap.userdn");            MY_GROUP_DN=appProp.getProperty("ldap.groupdn");        } catch (LDAPException f) {            f.printStackTrace();            System.exit(1);        }    }
      /**      * Add user to a group.     *      * Add a user to a group. This method uses dynamic groups. This     * method adds the Group details to the GroupMembership attribute.     *      * @param GroupName  A Group Name. Must be unique in the repository.     *      * @throws CAPURSystemException LDAP Specific system exception caused at runtime.     * @throws UserNotFoundException If the user is not found.     * @throws GroupNotFoundException If the group is not found.     */
    public void addUserToGroup(String userID,String groupName) throws LDAPException,UserNotFoundException    {        String[] str=null;        //Check if the user exists        userExists(userID);        boolean gAlreadyExists=false;        String[] getAttrs = { LDAP_GROUP_MEMBERSHIP };        LDAPEntry len = con.read(userDN, getAttrs);        LDAPAttribute attr1 = len.getAttribute(LDAP_GROUP_MEMBERSHIP);        int idx=0;        if (attr1 != null) {            Enumeration enum = attr1.getStringValues();            if (attr1.size() > 0 ) {                str=new String[attr1.size() + 1];                while(enum.hasMoreElements()) {                    String gName = (String) enum.nextElement();                    if (gName.equals(groupName)) {                    //If already a member of the group, Flag it                        gAlreadyExists=true;                     }                    else {                        if (gName.trim().length() != 0) {                        //build the String array with existing Group Names                            str[idx]=gName;                             idx++;                        }                    }                }            }        }        else {            //str would be null so assign a store            str=new String[1];        }        //This String array would consist of all the groups of the user        str[idx]=groupName;        // Update the GroupMembership only if the Group was not found for the user        if (!gAlreadyExists) {            LDAPAttribute attr2 = new LDAPAttribute(LDAP_GROUP_MEMBERSHIP,str);            LDAPModification ldm1 = new LDAPModification(LDAPModification.REPLACE, attr2);            con.modify(userDN, ldm1);        }    
    }    /**      * Delete user from a group.     *      * Delete a user from a group. This method uses dynamic groups. This     * method deletes the Group details from the GroupMembership attribute.     *      * @ejbgen:remote-method     * @param GroupName  A Group Name.     * @param UserName   An existing user.     *     * @throws CAPURSystemException LDAP Specific system exception caused at runtime.     * @throws UserNotFoundException If the user is not found.     * @throws GroupNotFoundException If the group is not found.     */
    public void deleteUserFromGroup(String userID,String groupName) throws LDAPException,UserNotFoundException    {        boolean gFound=false;        String[] getAttrs = { LDAP_GROUP_MEMBERSHIP };        String[] str=null;        //Check if the user exists        userExists(userID);        ArrayList values = new ArrayList();        LDAPEntry len = con.read(userDN, getAttrs);        LDAPAttribute attr1 = len.getAttribute(LDAP_GROUP_MEMBERSHIP);        Enumeration enum=null;        Vector v=new Vector();        if (attr1 != null) {            enum = attr1.getStringValues();            while (enum.hasMoreElements()) {                String tempStr=(String) enum.nextElement();                if (!tempStr.equalsIgnoreCase(groupName)) {                    values.add(tempStr);                } else {                    gFound=true;                }            }        }        String[] newStr=(String[])values.toArray(new String[values.size()]);        if (gFound) {            //Found the Group, need to update the repository            LDAPAttribute attr2=new LDAPAttribute(LDAP_GROUP_MEMBERSHIP,newStr);            LDAPModification ldm1 = new LDAPModification(LDAPModification.REPLACE, attr2);            con.modify(userDN, ldm1);        }     }     public boolean userExists(String userID) throws UserNotFoundException,LDAPException     {        boolean returnValue=true;        try {            LDAPEntry len = con.read(getUserDN(userID));            userDN=getUserDN(userID);        }        catch (LDAPException e) {            if ( e.getLDAPResultCode() == LDAPException.NO_SUCH_OBJECT ) {                //try if the user is a system user                try {                    LDAPEntry len = con.read(getSystemUserDN(userID));                    userDN=getSystemUserDN(userID);                    isSystemUser=true;                                   } catch (LDAPException f) {                    throw new UserNotFoundException();                 }            }            else {                throw new LDAPException();            }        }        return returnValue;     }
    public  String getUserDN(String userid) {        return "cn=" + userid + "," + MY_USER_DN;    }        public  String getSystemUserDN(String userid) {
        return "uid=" + userid + "," + MY_USER_DN;    }        public  String getGroupDN(String userid) {        return "cn=" + userid + "," + MY_GROUP_DN;    }    public Vector getAllGroups() throws LDAPException     {        String filter= "objectclass=groupofuniquenames";        String[] str = performSearch(filter,"cn");        Vector v = new Vector();        if ( (str != null) && (str.length > 0) ) {            for (int i=0;i != str.length; i++) {                v.add(str[i]);            }        }        return v;    }
        // Perform a search, returning a single attribute.  This can    // return an array, since there may be multiple matches.
    private String[] performSearch(String filter, String attrName) throws LDAPException     {        if (!con.isConnected()) { reconnect();};        ArrayList values = new ArrayList();        LDAPSearchResults lr = con.search(MY_SEARCHBASE,LDAPv3.SCOPE_SUB,        filter,new String[] { attrName },false);        while (lr.hasMoreElements()) {            LDAPEntry entry = lr.next();            LDAPAttribute attr = entry.getAttribute(attrName);            String[] attrValues = attr.getStringValueArray();            if (attrValues != null && attrValues.length != 0) {                values.add(attrValues[0]);            }        }        return (String[])values.toArray(new String[values.size()]);    }
    // Perform a search, returning a single attribute.  This can    // return an array, since there may be multiple matches.
    public Vector getUserGroups(String userName) throws LDAPException,UserNotFoundException {        userExists(userName);        Vector v = new Vector();        String[] str=null;        String[] getAttrs = { "GroupMembership" };        LDAPEntry len = con.read(userDN, getAttrs);        LDAPAttribute attr1 = len.getAttribute("GroupMembership");        if (attr1 != null) {            str = attr1.getStringValueArray();        }        if (str == null) {            String str1 = "User Not Part of Any Group";            v.add(str1);        } else {            for (int i=0; i != str.length; i++ ) {                v.add(str[i]);            }        }        return v;    }    public void disconnect() throws LDAPException {        con.disconnect();    }
    /**      * Get the member id  of the user     *      * @ejbgen:remote-method     * @param userID     User ID of the user.      *      * @return String    Returns the member ID of the User     *      * @throws CAPURSystemException LDAP Specific system exception caused at runtime.     * @throws UserNotFoundException If the user is not found.     */
    public String getMemberID(String userID) throws LDAPException,UserNotFoundException     {        userExists(userID);        String[] getAttrs = { "MemberID" };        String ReturnValue=null;        LDAPEntry len = con.read(userDN, getAttrs);        LDAPAttribute attr1 = len.getAttribute(LDAP_MEMBER_ID);        if (attr1 != null ) {            //This ensures that the member id attribute has been set for the user            Enumeration enum = attr1.getStringValues();            if (attr1.size() == 1 ) {                ReturnValue = (String) enum.nextElement();            }        }        return ReturnValue;    }    /**      * Get the member id  of the user     *      * @ejbgen:remote-method     * @param userID     User ID of the user.      *      * @return String    The Member ID of the user     *      * @throws CAPURSystemException LDAP Specific system exception caused at runtime.     * @throws UserNotFoundException If the user is not found.     *      */
    public String getPersonID(String userID)    throws LDAPException,UserNotFoundException     {        userExists(userID);        String[] getAttrs = { "personID" };        LDAPEntry len = con.read(userDN, getAttrs);        LDAPAttribute attr1 = len.getAttribute(LDAP_PERSON_ID);        if (attr1 != null ) {            String[] str=attr1.getStringValueArray();            if (str != null) {                return str[0];            }        }        return null;    }
    /**      * Get the user id of the user based on the person id     *      * @ejbgen:remote-method     * @param userID     Person ID of the user.      *      * @return String    The user id of the user.     *      * @throws CAPURSystemException LDAP Specific system exception caused at runtime.     * @throws UserNotFoundException If the user is not found.     */
    public String getUserIDFromPersonID (String personID)    throws LDAPException,UserNotFoundException,MultipleRecordsException     {        if (!con.isConnected()) { reconnect();};        String userId = null;        String strAttr[] = { "uid" };        String ldapFilter = "(" + "personID=" + personID + ")";        String[] results = performSearch(ldapFilter, "uid");        // We should only get one record back        if (results.length > 1) {            throw new MultipleRecordsException();        }        else {            if (results.length == 1) {            userId = results[0];            }        }        if (userId == null) {            throw new UserNotFoundException();        }              return userId;    }
    /**      * Get the user id of the user based on the person id     *      * @ejbgen:remote-method     * @param userID     Person ID of the user.      *      * @return String    The user id of the user.     *      * @throws CAPURSystemException LDAP Specific system exception caused at runtime.     * @throws UserNotFoundException If the user is not found.     */
    public String getUserIDFromMemberID (String MemberID)    throws LDAPException,UserNotFoundException,MultipleRecordsException  {        String userId = null;        String strAttr[] = { "uid" };        String ldapFilter = "(" + "MemberID=" + MemberID + ")";        String[] results = performSearch(ldapFilter, "uid");        // We should only get one record back        if (results.length > 1) {            throw new MultipleRecordsException();        }        else if (results.length == 1) {            userId = results[0];        }        if (userId == null) {            throw new UserNotFoundException();        }              return userId;    }
    /**      * get the status of the user. Use the static variables to      * check the return value.     * @ejbgen:remote-method     * @param userID     User ID String of the user.     *      * @return String  Indicating if the user is Active or not. Use     * the static fields in this class to check the status.     *        * @throws CAPURSystemException LDAP Specific system exception caused at runtime.     * @throws UserNotFoundException If the user is not found.     */    public String getUserStatus(String userID)     throws LDAPException,UserNotFoundException    {        userExists(userID);        String[] getAttrs = { LDAP_USER_STATUS };        LDAPEntry len = con.read(userDN, getAttrs);        LDAPAttribute attr1 = len.getAttribute(LDAP_USER_STATUS);        if (attr1 != null ) {            String[] str=attr1.getStringValueArray();            if (str != null) {                return str[0];            }        }        else {            throw new LDAPException();        }        return null;    }             /**      * Set the password of the user     *      *      * @ejbgen:remote-method     * @param userID         User ID String of the user.     * @param password       password of the user.     *      * @throws CAPURSystemException LDAP Specific system exception caused at runtime.     * @throws UserNotFoundException If the user is not found.     */    public void setPassword (String userID,String password)         throws UserNotFoundException,LDAPException {                if (!userExists(userID)) {            throw new UserNotFoundException();        }                LDAPAttribute attr1=new LDAPAttribute("userpassword",password);        LDAPModification ldm = new LDAPModification(LDAPModification.REPLACE, attr1);        con.modify(userDN, ldm);            }    /**      * Set the user status.     * @param userID     User ID String of the user.     * @param status     The status of the user. Use the static fields     * to define the status of the user.            *      * @throws CAPURSystemException LDAP Specific system exception caused at runtime.     * @throws UserNotFoundException If the user is not found.     */    public void setUserStatus(String userID,String status)         throws UserNotFoundException,LDAPException {                if (!userExists(userID)) {            throw new UserNotFoundException();        }        LDAPAttribute attr1=new LDAPAttribute(appProp.getProperty("ldap.userstatus"),status);        LDAPModification ldm = new LDAPModification(LDAPModification.REPLACE, attr1);            con.modify(getUserDN(userID), ldm);            }        /**      * Get the security answers of the user     * @param userID         User ID String of the user.     *      * @return SecurityVO   Return the  {@link org.cap.common.capValueObject.SecurityVO  Security Object}}.     *                            * @throws CAPURSystemException LDAP Specific system exception caused at runtime.     * @throws UserNotFoundException If the user is not found.     */    public SecurityVO getSecurityAnswers(String userID)         throws LDAPException,UserNotFoundException {                if (!userExists(userID)) {            throw new UserNotFoundException();        }                String[] getAttrs = { appProp.getProperty("ldap.securityanswers") };            LDAPEntry len = con.read(getUserDN(userID), getAttrs);            LDAPAttribute attr1 = len.getAttribute(appProp.getProperty("ldap.securityanswers"));            if (attr1 != null) {                Enumeration enum = attr1.getStringValues();                SecurityVO so = new SecurityVO();                if (attr1.size() > 0 ) {                    String[] str=new String[attr1.size()];                    int idx=0;                    while(enum.hasMoreElements()) {                        str[idx]=(String) enum.nextElement();                        idx++;                    }                    so.setStringArray(str);                    return so;                }             }                return null;    }            /**      * Get the Last Name of the user     *      * @ejbgen:remote-method     * @param userID     User ID String of the user.     *      * @return String    The last name of the user.     *                        * @throws CAPURSystemException LDAP Specific system exception caused at runtime.     * @throws UserNotFoundException If the user is not found.     */    public String getLastName(String userID)          throws LDAPException,UserNotFoundException {                if (!userExists(userID)) {            throw new UserNotFoundException();        }                String[] getAttrs = { "sn" };        String ReturnValue=null;            LDAPEntry len = con.read(getUserDN(userID), getAttrs);            LDAPAttribute attr1 = len.getAttribute("sn");            String[] str=attr1.getStringValueArray();            if (str != null) {                ReturnValue=str[0];            }         return ReturnValue;    }            /**      * This method confirms that the combination of the last name and the      * security answers are unique in the system. This is required for the      * forgotten user id and password functionality.     *      * @param SecurityVO The {@link org.cap.common.capValueObject.SecurityVO SecurityVO}  which consists the security answers.     * @param lastName    The last name of the user     *      * @return boolean    If the combination of the last name and the security answers     *                    is unique return true, else false.     *      * @throws CAPURSystemException LDAP Specific system exception caused at runtime.     */    public boolean isAttrsUnique(SecurityVO securityObj,String lastName) throws LDAPException {        String[] str=securityObj.getStringArray();        StringBuffer filter=new StringBuffer();                for (int i=0;i !=str.length;i++) {            filter.append("(SecurityAnswers=" + str[i] + ")");        }        filter.append("(sn=" + lastName + ")");        String ldapFilter="(&" + filter.toString() + ")";        if ( getCount(ldapFilter) == 0 ) {            return true;        }         else {            return false;         }    }            /**      * Get the number of occurances returned for the filter string     *      * Do not try to do a search with a filter that would potentially      * return more than a thousand rows, as this would deteriorate the      * performance.     *      * @param filter        A valid LDAP filter     *      * @return int          The count of the number of entries matching the filter.     * @throws LDAPException LDAP Specific system exception caused at runtime.     *              */    public int getCount(String filter) throws LDAPException {        int numberOfRows=0;            String[] str={"cn"};            LDAPSearchResults lr = con.search(appProp.getProperty("ldap.searchbase"),                    LDAPv3.SCOPE_SUB, filter, str, false);            while (lr.hasMoreElements()) {                lr.next();                numberOfRows++;            }               return numberOfRows;    }            /**      * Sets the Last Name of the user     * @param userID     User ID String of the user.      * @param lastName   The last name of the user.     *      * @throws CAPURSystemException LDAP Specific system exception caused at runtime.     * @throws UserNotFoundException If the user is not found.     */    public void setLastName(String userID,String lastName)        throws LDAPException,UserNotFoundException {                if (!userExists(userID)) {            throw new UserNotFoundException();        }        LDAPAttribute attr1=new LDAPAttribute("sn",lastName);        LDAPModification ldm = new LDAPModification(LDAPModification.REPLACE, attr1);            con.modify(getUserDN(userID), ldm);    }    /**      * This method is used to establish connection to the user repository.     */    private void reconnect() throws LDAPException {            int port = new Integer(appProp.getProperty("ldap.port")).intValue();            con.connect(appProp.getProperty("ldap.host"),                        port,appProp.getProperty("ldap.userid"),                        appProp.getProperty("ldap.password"));             }     /**      * This method is used to derive the user id given the last name and the      * security answers.     *      * @param SecurityVO The {@link org.cap.common.capValueObject.SecurityVO SecurityVO} which consists the security answers     * @param lastName    The last name of the user     *      * @return String    If the combination of the last name and the security answers     *                    is unique return the user ID, else return null     * @ejbgen:remote-method         *      * @throws CAPURSystemException LDAP Specific system exception caused at runtime.     * @throws UserNotFoundException If the user does not exist which has the last name      * and security questions unique.     */    public String getUserID(SecurityVO securityObj,String lastName) throws LDAPException,UserNotFoundException,MultipleRecordsException {               String userid=null;        String[] str=securityObj.getStringArray();        StringBuffer filter=new StringBuffer();        // Build the filter        for (int i=0;i !=str.length;i++) {            filter.append("(SecurityAnswers=" + str[i] + ")");        }        filter.append("(sn=" + lastName + ")");        String ldapFilter="(&" + filter.toString() + ")";        String[] results = performSearch(ldapFilter, "uid");        // We should only get one record back        if (results.length > 1) {              throw new MultipleRecordsException("expected one record from search--got " + results.length + ":" + Arrays.asList(results));        }        else if (results.length == 1) {             userid = results[0];        }                        if (userid == null) {            throw new UserNotFoundException();        }        return userid;    }    public boolean isSystemUser(String userID) throws UserNotFoundException,LDAPException {        isSystemUser=false;        userExists(userID);        return isSystemUser;            }
} 